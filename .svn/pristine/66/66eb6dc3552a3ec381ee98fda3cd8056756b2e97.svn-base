using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.Common;
using Pub;
public partial class Product_Package : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            CommonClass.isAllow(User.Identity.Name, this, "包装");
            txtLot.Attributes.Add("onkeypress", "EnterTextBox('btnEnter')");
            txtPreWidth.Attributes.Add("readonly", "true");
            txtPreWidth.Attributes.Add("readonly", "true");
            txtPinMin.Attributes.Add("readonly", "true");
            txtPETType.Attributes.Add("readonly", "true");
            txtType.Attributes.Add("readonly", "true");
            txtThinkness.Attributes.Add("readonly", "true");
            //txtPinHaoFinished.Attributes.Add("readonly", "true");
            //txtPinHaoSemifinished.Attributes.Add("readonly", "true");
            txtLevel.Attributes.Add("readonly", "true");
            txtPasteFilmDate.Attributes.Add("readonly", "true");
            txtSubsectionDate.Attributes.Add("readonly", "true");
            txtUVCompleteDate.Attributes.Add("readonly", "true");
            //增加有效幅宽 add by lei.xue on 2017-5-22 
            txtValidWidth.Attributes.Add("readonly", "true");

            //品号信息绑定
            CRUD.Setdll(ddlCustomer, "Customer");
            CRUD.Setdll(ddlProcess, "Process");
            CRUD.Setdll(ddlProductType, "ProductType");
            CRUD.Setdll(ddlSemiProductType, "ProductType");
            CRUD.Setdll(ddlSemiStructure, "Structure");
            CRUD.Setdll(ddlSize, "Size");
            CRUD.Setdll(ddlStructure, "Structure");
            CRUD.Setdll(ddlThinkness, "Thinkness");
            ShiftType(ddlPinHaoType.SelectedValue);
        }
    }
    private void setddl(string workshop)
    {
        //膜的等级
        //CRUD.Setdll(ddlFilmLevel, "FilmLevel");
        CRUD.Setdll(ddlWorkshop, "workshop");
        //ddlWorkshop.SelectedIndex = 0;
        ddlWorkshop.ClearSelection();
        ddlWorkshop.Items.FindByValue(workshop).Selected = true;
        //ddlEqp.ClearSelection();
        //CRUD.SetEqpDDL(ddlEqp, ddlWorkshop.SelectedValue, lblWorksiteID.Text);


    }
    protected void btnEnter_Click(object sender, EventArgs e)
    {
        string originalLot = "";
        //判断是否是UV成型的条码
        string check = CRUD.CheckFilmLabel("UV成型", txtLot.Text);
        if (check != "fail")
        {
            originalLot = check;
        }
        else
        {
            originalLot = txtLot.Text;
        }
        ViewState["originalLot"] = originalLot;
        //查询是否可以过站
        string result = CRUD.QueryStationOfLot(lblWorksiteID.Text, originalLot);
        if (result != "success")
        {
            JScript.Alert(result, this);
            txtLot.Text = "";
            return;
        }
        DataTable lotDt = CRUD.GetLotBasisInfo(originalLot);
        string workshop = lotDt.Rows[0]["workshopID"].ToString();
        //膜等级
        //txtFilmLevel.Text = lotDt.Rows[0]["mouldlevel"].ToString();
        setddl(workshop);

        string WO = lotDt.Rows[0]["workorder"].ToString();
        //显示批次长宽信息
        txtPreWidth.Text = lotDt.Rows[0]["mouldwidth"].ToString();
        txtPreLength.Text = lotDt.Rows[0]["mouldlength"].ToString();
        txtLevel.Text = lotDt.Rows[0]["filmlevel"].ToString();
        //======================标签宽度改为取有效宽幅 modify by lei.xue on 2017-5-22========================================
        txtValidWidth.Text = lotDt.Rows[0]["validwidth"].ToString();

        //显示工单信息
        SetWOinfo(WO);

        //显示打印标签时间
        string[] LabelTime = FilmCRUD.GetLabelTime(txtLot.Text);
        txtSubsectionDate.Text = LabelTime[0];
        txtPasteFilmDate.Text = LabelTime[1];
        txtUVCompleteDate.Text = LabelTime[2];


        CRUD.setLabelProcess(lblLotprocess, lblCurrnentWorksite, lblEndProcess, ViewState["originalLot"].ToString(), lblWorksiteID.Text);

    }
    protected void btnSaveClose_Click(object sender, EventArgs e)
    {
        int intNo;
        string PinHao = "";
        if (ddlPinHaoType.SelectedValue == "成品")
        {
            PinHao = "6" + ddlCustomer.SelectedValue;
            intNo = Convert.ToInt32(Package.QueryMaxPinHao(PinHao, "成品"));
            PinHao = PinHao
                   + ddlProductType.SelectedValue
                   + ddlStructure.SelectedValue
                   + ddlSize.SelectedValue
                   + string.Format("{0:D3}", intNo + 1);
            txtPinHaoFinished.Text = PinHao;
        }
        else
        {
            PinHao = "3"
                   + ddlProductType.SelectedValue
                   + ddlStructure.SelectedValue
                   + ddlProcess.SelectedValue
                   + ddlThinkness.SelectedValue;

            intNo = Convert.ToInt32(Package.QueryMaxPinHao(PinHao, "成品"));
            PinHao = PinHao
                   + string.Format("{0:D3}", intNo + 1);
            txtPinHaoSemifinished.Text = PinHao;
        }

    }

    private void ClearInfo()
    {
        txtLot.Text = "";
        //txtReason.Text = "";

    }
    protected void ddlPinHaoType_TextChanged(object sender, EventArgs e)
    {
        ShiftType(ddlPinHaoType.SelectedValue);
    }

    /// <summary>
    /// 切换成品和半成品显示
    /// </summary>
    /// <param name="type"></param>
    private void ShiftType(string type)
    {
        if (type == "成品")
        {
            PanelFinished.Visible = true;
            PanelSemifinished.Visible = false;
        }
        else
        {
            PanelFinished.Visible = false;
            PanelSemifinished.Visible = true;
        }
    }

    private void SetWOinfo(string WO)
    {
        DataTable dt = CreateLot.QueryWorkorderIno(WO);
        if (dt.Rows.Count > 0)
        {
            txtThinkness.Text = dt.Rows[0]["MouldThinkness"].ToString();
            txtType.Text = dt.Rows[0]["MouldType"].ToString();
            txtPETType.Text = dt.Rows[0]["MouldPETType"].ToString();
            txtPinMin.Text = dt.Rows[0]["mouldpinmin"].ToString();
        }
        else
        {
            JScript.Alert("未查询到工单信息", this);
        }
    }
    protected void btnEdit_Click(object sender, EventArgs e)
    {
        string strPinHao = "";
        if (ddlPinHaoType.SelectedValue == "成品")
        {
            strPinHao = txtPinHaoFinished.Text;
        }
        else
        {
            strPinHao = txtPinHaoSemifinished.Text;
        }
        string result = CRUD.FilmCheckOut(ViewState["originalLot"].ToString(), "", "", ddlWorkshop.SelectedValue,
                lblWorksiteID.Text,
                System.Web.HttpContext.Current.Request.Cookies["userID"].Value.ToString(),
                "");
        string packingresult = Package.InsertPacking(ViewState["originalLot"].ToString(),
                                                     strPinHao,
                                                     ddlPinHaoType.SelectedValue,
                                                     System.Web.HttpContext.Current.Request.Cookies["userID"].Value.ToString(),
                                                     txtBeforePackageWeight.Text,
                                                     txtAfterPackageWeight.Text
                                                     );
        if (result == "success" && packingresult == "success")
        {
            JScript.Alert("包装过站成功！", this);
            ClientScript.RegisterStartupScript(ClientScript.GetType(), "myscript", "<script>PrintLabel();</script>");
            //ClearInfo();
            return;
        }
        else
        {
            JScript.Alert("包装过站失败！", this);
            return;
        }
    }
    protected void btnReset_Click(object sender, EventArgs e)
    {
        ClientScript.RegisterStartupScript(ClientScript.GetType(), "myscript", "<script>PrintLabel();</script>");

    }
}